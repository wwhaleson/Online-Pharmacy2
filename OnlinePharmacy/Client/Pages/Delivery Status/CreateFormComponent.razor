@inject HttpClient _client



<EditForm Model="@delivery" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="d-flex flex-column mt-4" id="flexcolumndelivery">
            <div class="card bg-light mb-3 DeliveryCard">
                <div class="card-header">Delivery</div>
                <div class="card-body">
                    <div class="row gx-3 mb-3">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Order ID: </label>
                                <div>
                                    <InputSelect @bind-Value="delivery.OrderID" class="form-control">
                                        <option value="">-- Order ID --</option>
                                        @if (Orders != null && Orders.Any())
                                        {
                                            var latestOrder = Orders.OrderByDescending(oc => oc.OrderID).First();
                                            <option value="@latestOrder.OrderID">@latestOrder.OrderID</option>
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => delivery.OrderID)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Handled by: </label>
                                <div>
                                    <InputSelect @bind-Value="delivery.StaffID" class="form-control">
                                        <option value="">-- Staff --</option>
                                        @if (Staffs != null)
                                        {
                                            foreach (var staff in Staffs.Where(staff => staff.Position == "Order Clerk"))
                                            {
                                                <option value="@staff.StaffID">@staff.StaffFname @staff.StaffLname</option>
                                            }
                                        }
                                    </InputSelect>
                                    <ValidationMessage For="@(() => delivery.StaffID)" />
                                </div>
                            </div>

                        </div>

                    </div>
                    <div class="row gx-3 mb-3">
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Estimated Delivery Date: </label>
                                <div>
                                    <InputDate @bind-Value="@delivery.EstimatedDeliveryDate" class="form-control" />
                                    <ValidationMessage For="@(() => delivery.EstimatedDeliveryDate)" />
                                </div>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="form-group">
                                <label>Estimated Delivery Time: </label>
                                <div>
                                    <input type="time" @bind="@delivery.EstimatedDeliveryTime" class="form-control" />
                                    <ValidationMessage For="@(() => delivery.EstimatedDeliveryTime)" />
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row gx-3 mb-3">
                        <div class="form-group">
                            <label>Delivery Method: </label>
                            <div>
                                <InputText @bind-Value="@delivery.DeliveryMethod" class="form-control" />
                                <ValidationMessage For="@(() => delivery.DeliveryMethod)" />
                            </div>
                        </div>
                    </div>
                    <div class="row gx-3 mb-3">
                        <div class="form-group">
                            <label>Delivery Price SGD$: </label>
                            <input type="number" @bind="@delivery.DeliveryCost" class="form-control" aria-label="Amount (to the nearest dollar)" />
                            <ValidationMessage For="@(() => delivery.DeliveryCost)" />
                        </div>
                    </div>
                    <div class="row gx-3 mb-3">
                        <div class="form-group">
                            <label>Delivery Status: </label>
                            <div>
                                <InputSelect @bind-Value="delivery.DeliveryStatus" class="form-control">
                                    <option value="">-- Select Delivery Status --</option>
                                    <option value="Packing">Packing</option>
                                    <option value="Delivering">Delivering</option>
                                    <option value="Completed">Completed</option>
                                </InputSelect>
                                <ValidationMessage For="@(() => delivery.DeliveryStatus)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>

    </fieldset>
    <div class="d-flex flex-column-md-6 mt-2 justify-content-center">
        @if (!Disabled)
        {
            <button type="submit" class="btn btn-success me-2">
                @ButtonText
            </button>
        }
    </div>
    <a href="/OrderItem/create/" class="btn btn-secondary backbutton">
        <span class="oi oi-arrow-circle-left"></span>
        Back to create Order Item
    </a>
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Delivery? delivery { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }


    private IList<Order>? Orders;
    private IList<Staff>? Staffs;

    protected async override Task OnInitializedAsync()
    {
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }

}