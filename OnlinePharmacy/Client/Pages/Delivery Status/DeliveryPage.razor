@attribute [Authorize]
@inject HttpClient _client
@inject IJSRuntime js
@page "/Delivery"
@inject HttpInterceptorService _interceptor
@implements IDisposable
<PageTitle>Delivery</PageTitle>
<div class="container">
    <div class="d-flex flex-column" id="dflexdeliver">
        <h1 class="mt-5" id="deliverheader">Delivery</h1>
    </div>

    @if (Deliverys == null)
    {
        <div class="alert alert-info">Loading Deliveries</div>
    }
    else
    {
        <div class="table-responsive mt-3">
            <table class="table " id="deliveryTable">
                <thead class="table-light">
                    <tr id="delivertablecolumnname">
                        <th scope="col" class="dcol">#Deliver ID</th>
                        <th scope="col" class="dcol">Est Delivery Date</th>
                        <th scope="col" class="dcol">Est Delivery Time</th>
                        <th scope="col" class="dcol">Status</th>
                    </tr>
                </thead>

                <tbody>
                    @foreach (var delivery in Deliverys)
                    {
                        <tr>
                            <td class="dr">@delivery.DeliveryID</td>
                            <td class="dr">@delivery.EstimatedDeliveryDate.Value.ToString("dddd, dd MMMM yyyy")</td>
                            <td class="dr">@delivery.EstimatedDeliveryTime.Value.ToString("hh:mm tt")</td>
                            <td class="dr">@delivery.DeliveryStatus</td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
</div>




@code {
    private List<Delivery>? Deliverys;
    <!--When the page begins to load-->
    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Deliverys = await _client.GetFromJsonAsync<List<Delivery>>($"{Endpoints.DeliverysEndpoint}");
    }
    async Task Delete(int deliveryId)
    {
        if (Deliverys != null)
        {
            var delivery = Deliverys.First(q => q.DeliveryID == deliveryId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to Delete {delivery.DeliveryID}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.DeliverysEndpoint}/{deliveryId}");
                await OnInitializedAsync();
            }
        }
    }
    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        await js.InvokeVoidAsync("AddDataTable", "#deliveryTable");
    }

    public void Dispose()
    {
        _interceptor.DisposeEvent();
        js.InvokeVoidAsync("DataTablesDispose", "#deliveryTable");
    }

}