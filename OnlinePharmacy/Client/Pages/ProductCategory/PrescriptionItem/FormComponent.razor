@inject HttpClient _client

<EditForm Model="@prescriptionitem" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">

        <div class="form-group">
            <label>Order ID: </label>
            <div>
                <InputSelect @bind-Value="prescriptionitem.OrderID" class="form-control">
                    <option value="">-- Order ID --</option>
                    @if (Orders != null)
                    {
                        foreach (var order in Orders)
                        {
                            <option value="@order.OrderID">@order.OrderID</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => prescriptionitem.OrderID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Prescription ID: </label>
            <div>
                <InputSelect @bind-Value="prescriptionitem.PrescriptionID" class="form-control">
                    <option value="">-- Prescription ID --</option>
                    @if (Prescriptions != null)
                    {
                        foreach (var prescription in Prescriptions)
                        {
                            <option value="@prescription.PrescriptionID">@prescription.PrescriptionID</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => prescriptionitem.PrescriptionID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Product ID: </label>
            <div>
                <InputSelect @bind-Value="prescriptionitem.ProductID" class="form-control">
                    <option value="">-- Product ID --</option>
                    @if (Products != null)
                    {
                        foreach (var product in Products)
                        {
                            <option value="@product.ProductID">@product.ProductID @product.ProductName @product.PrescriptionStatus</option>
                        }
                    }
                </InputSelect>
                <ValidationMessage For="@(() => prescriptionitem.ProductID)" />
            </div>
        </div>

        <div class="form-group">
            <label>Quantity: </label>
            <input type="number" @bind="@prescriptionitem.PrescriptionItemQuantity" class="form-control" />
            <ValidationMessage For="@(() => prescriptionitem.PrescriptionItemQuantity)" />
        </div>

        <div class="form-group mb-3">
            <label>Sub-Total SGD$: </label>
            <input type="number" @bind="@prescriptionitem.PrescriptionItemSubTotal" class="form-control" aria-label="Amount (to the nearest dollar)" />
            <ValidationMessage For="@(() => prescriptionitem.PrescriptionItemSubTotal)" />
        </div>


    </fieldset>

    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success btn-block">
            @ButtonText
        </button>
    }
    <BackToList Target="PrescriptionItem" />
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public PrescriptionItem? prescriptionitem { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }


    private IList<Product>? Products;
    private IList<Order>? Orders;
    private IList<Prescription>? Prescriptions;
    protected async override Task OnInitializedAsync()
    {
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");
        Prescriptions = await _client.GetFromJsonAsync<List<Prescription>>($"{Endpoints.PrescriptionsEndpoint}");
    }

}