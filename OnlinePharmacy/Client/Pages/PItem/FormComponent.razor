@inject HttpClient _client

<EditForm Model="@prescriptionitem" OnValidSubmit="@OnValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <fieldset disabled="@Disabled">
        <div class="d-flex flex-column mt-4" id="flexcolumnprescriptionitem">
            <div class="card bg-light mb-3 PrescriptionItemCard">
                <div class="card-header">Prescription Item</div>
                <div class="card-body">
                    <div class="row gx-3 mb-3">
                        <div class="col-md-6">

                        </div>                   
                    </div>
                    <div class="row gx-3 mb-3">
                        <div class="col-md-6">
                            
                        </div>
                        <div class="col-md-6">
                            
                        </div>
                    </div>
                </div>       
            </div>
        </div>
        
    </fieldset>
    <div class="d-flex flex-column-md-6 mt-2 justify-content-center">
    @if (!Disabled)
    {
        <button type="submit" class="btn btn-success me-2">
            @ButtonText
        </button>
    }
    <BackToList Target="PrescriptionItem" />
    </div>
</EditForm>

@code {
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public PrescriptionItem? prescriptionitem { get; set; }
    [Parameter] public string ButtonText { get; set; } = "Save";
    [Parameter] public EventCallback OnValidSubmit { get; set; }


    private IList<Prescription>? Prescriptions;
    private IList<Product>? Products;
    private IList<Order>? Orders;

    protected async override Task OnInitializedAsync()
    {
        Prescriptions = await _client.GetFromJsonAsync<List<Prescription>>($"{Endpoints.PrescriptionsEndpoint}");
        Products = await _client.GetFromJsonAsync<List<Product>>($"{Endpoints.ProductsEndpoint}");
        Orders = await _client.GetFromJsonAsync<List<Order>>($"{Endpoints.OrdersEndpoint}");

    }

}