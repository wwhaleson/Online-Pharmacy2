@attribute [Authorize]
@inject HttpClient _client
@inject IJSRuntime js
@inject HttpInterceptorService _interceptor
@implements IDisposable
@page "/Staff"
<PageTitle>Staff</PageTitle>



<div class="container">

    <div class="d-flex flex-column" id="dflexStaff">
        <h1 class="mt-5" id="Staffheader">Staff</h1>
        <a href="/Staff/create" class="btn btn-secondary createstaffbutton">
            <span class="oi oi-plus"></span>
            Create New Staff
        </a>
    </div>
    <div class="col-4 p-0 justify-content-end">
        <Input @oninput="Search" placeholder="Seach First Name" class="p-3"/>

    </div>


    <div class="row  mt-3">
        <div class="row row-cols-1 row-cols-md-3 g-4 mt-2">
            @if (Staffs == null)
            {
                <div class="alert alert-info">Loading Staffs</div>
            }
            else
            {
                @foreach (var staff in Staffs)
                {
                    <div class="col aStaff">
                        <div class="card h-100 Staffcard text-decoration-none" style="word-wrap: break-word; cursor: pointer;">
                            @if (!string.IsNullOrEmpty(staff.StaffImage) && Uri.TryCreate(staff.StaffImage, UriKind.RelativeOrAbsolute, out _))
                            {
                                <img src="@staff.StaffImage" class="staffimage img-fluid">
                            }
                            else
                            {
                                <!-- Display a default image or placeholder image -->
                                <img src="https://cdn-icons-png.flaticon.com/512/2815/2815428.png" class="staffimage img-fluid">
                            }
                            <div class="card-body Staffcardbody">
                                <h3 class="staffname">@staff.StaffFname @staff.StaffLname</h3>
                                <h5 class="staffposition">@staff.Position</h5>
                            </div>
                            <div class="d-flex justify-content-center">
                                <a href="/Staff/view/@staff.StaffID" class="btn btn-primary actionbutton">
                                    <i class="bi bi-eye"></i>
                                </a>
                                <a href="/Staff/edit/@staff.StaffID" class="btn btn-warning actionbutton">
                                    <i class="bi bi-pencil-square"></i>
                                </a>
                                <button class="btn btn-danger actionbutton" @onclick="@(()=>Delete(@staff.StaffID))">
                                    <i class="bi bi-x-lg"></i>
                                </button>
                            </div>

                        </div>
                    </div>

                }
            }
        </div>
    </div>
</div>


@code {
    private List<Staff>? Staffs;
    protected async override Task OnInitializedAsync()
    {
        _interceptor.MonitorEvent();
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
    }
    async Task Delete(int staffId)
    {
        if (Staffs != null)
        {
            var staff = Staffs.First(q => q.StaffID == staffId);
            var confirm = await js.InvokeAsync<bool>("confirm", $"Do you want to Delete {staff.StaffFname}?");
            if (confirm)
            {
                await _client.DeleteAsync($"{Endpoints.StaffsEndpoint}/{staffId}");
                await OnInitializedAsync();
            }
        }
    }
    public void Dispose()
    {
        _interceptor.DisposeEvent();
    }


    public async void Search(ChangeEventArgs args)
    {
        var searchTerm = (string)args.Value;
        Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            Staffs = await _client.GetFromJsonAsync<List<Staff>>($"{Endpoints.StaffsEndpoint}");
        }
        else
        {
            Staffs = Staffs
                .Where(x => x.StaffFname.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .OrderByDescending(x => x.StaffID)
                .ToList();
        }

        StateHasChanged();
    }


}