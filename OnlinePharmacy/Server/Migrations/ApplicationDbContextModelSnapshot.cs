// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using OnlinePharmacy.Server.Data;

#nullable disable

namespace OnlinePharmacy.Server.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.DeviceFlowCodes", b =>
                {
                    b.Property<string>("UserCode")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("DeviceCode")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.HasKey("UserCode");

                    b.HasIndex("DeviceCode")
                        .IsUnique();

                    b.HasIndex("Expiration");

                    b.ToTable("DeviceCodes", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.Key", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Algorithm")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DataProtected")
                        .HasColumnType("bit");

                    b.Property<bool>("IsX509Certificate")
                        .HasColumnType("bit");

                    b.Property<string>("Use")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Version")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Use");

                    b.ToTable("Keys", (string)null);
                });

            modelBuilder.Entity("Duende.IdentityServer.EntityFramework.Entities.PersistedGrant", b =>
                {
                    b.Property<string>("Key")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("ClientId")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("ConsumedTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasMaxLength(50000)
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<DateTime?>("Expiration")
                        .HasColumnType("datetime2");

                    b.Property<string>("SessionId")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("SubjectId")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Key");

                    b.HasIndex("ConsumedTime");

                    b.HasIndex("Expiration");

                    b.HasIndex("SubjectId", "ClientId", "Type");

                    b.HasIndex("SubjectId", "SessionId", "Type");

                    b.ToTable("PersistedGrants", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "ad2bcf0c-20db-474f-8407-5a6b159518ba",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "3ed2ec18-6112-4de0-8449-be133a072f28",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            RoleId = "ad2bcf0c-20db-474f-8407-5a6b159518ba"
                        },
                        new
                        {
                            UserId = "fedeeeb4-ae9f-4617-b6dc-6bbbe227b05e",
                            RoleId = "3ed2ec18-6112-4de0-8449-be133a072f28"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("OnlinePharmacy.Server.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "3781efa7-66dc-47f0-860f-e506d04102e4",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7f052eee-39c4-455d-abb4-55b0230f0302",
                            Email = "admin@localhost.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHKIj/jONabDkTBaZwGirsp6GsgY4xtxZwEdWCzbzRPjZGNRvcSAEQmhiwzbZ5XUyQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ce53a2db-d740-4b4d-9eba-68d8871aba83",
                            TwoFactorEnabled = false,
                            UserName = "admin@localhost.com"
                        },
                        new
                        {
                            Id = "fedeeeb4-ae9f-4617-b6dc-6bbbe227b05e",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4ec18d2c-10a7-4744-969c-9a68b783b15e",
                            Email = "user@localhost.com",
                            EmailConfirmed = false,
                            FirstName = "User",
                            LastName = "User",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF9JFUXqLgtB6dSGTnPLhHR4VuALH3EN+lTeU6FIyMluyZejhGkV6YNlJRJV+e4MJA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "0b2b4ee8-d7fa-45a6-90f3-12c1ca62312d",
                            TwoFactorEnabled = false,
                            UserName = "user@localhost.com"
                        });
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryID = 1,
                            CategoryDescription = "Medicines that needs prescription",
                            CategoryName = "Prescription Item"
                        },
                        new
                        {
                            CategoryID = 2,
                            CategoryDescription = "Vitamins for your kids",
                            CategoryName = "Vitamins"
                        },
                        new
                        {
                            CategoryID = 3,
                            CategoryDescription = "Medicines that allow to be purchasing over the counter",
                            CategoryName = "Over-The-Counter-Medicines"
                        });
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<string>("CustAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustBlockNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CustEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustFloorNo")
                        .HasColumnType("int");

                    b.Property<string>("CustFname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustGender")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustLname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CustPass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CustPhoneNo")
                        .HasColumnType("bigint");

                    b.Property<long>("CustPostalCode")
                        .HasColumnType("bigint");

                    b.Property<int>("CustUnitNo")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.ToTable("Customer");

                    b.HasData(
                        new
                        {
                            CustomerID = 1,
                            CustAddress = "Ubi Avenue 1",
                            CustBlockNo = "123",
                            CustEmail = "marylim55@gmail.com",
                            CustFloorNo = 5,
                            CustFname = "Mary",
                            CustGender = "Female",
                            CustLname = "Lim",
                            CustPass = "HelloWorld#1",
                            CustPhoneNo = 83719378L,
                            CustPostalCode = 123983L,
                            CustUnitNo = 210
                        },
                        new
                        {
                            CustomerID = 2,
                            CustAddress = "Tampines Street 61",
                            CustBlockNo = "123A",
                            CustEmail = "johntan66@gmail.com",
                            CustFloorNo = 6,
                            CustFname = "John",
                            CustGender = "Male",
                            CustLname = "Tan",
                            CustPass = "HelloWorld#2",
                            CustPhoneNo = 93682946L,
                            CustPostalCode = 103933L,
                            CustUnitNo = 208
                        });
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Delivery", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryID"));

                    b.Property<decimal>("DeliveryCost")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("DeliveryMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("DeliveryStatus")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateTime?>("EstimatedDeliveryDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("EstimatedDeliveryTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.HasKey("DeliveryID");

                    b.HasIndex("OrderID");

                    b.HasIndex("StaffID");

                    b.ToTable("Delivery");

                    b.HasData(
                        new
                        {
                            DeliveryID = 1,
                            DeliveryCost = 5m,
                            DeliveryMethod = "Standard",
                            DeliveryStatus = "Packing",
                            EstimatedDeliveryDate = new DateTime(2024, 2, 10, 13, 34, 17, 736, DateTimeKind.Local).AddTicks(651),
                            EstimatedDeliveryTime = new DateTime(2024, 2, 5, 18, 34, 17, 736, DateTimeKind.Local).AddTicks(675),
                            OrderID = 1,
                            StaffID = 1
                        },
                        new
                        {
                            DeliveryID = 2,
                            DeliveryCost = 5m,
                            DeliveryMethod = "Standard",
                            DeliveryStatus = "Packing",
                            EstimatedDeliveryDate = new DateTime(2024, 2, 10, 13, 34, 17, 736, DateTimeKind.Local).AddTicks(679),
                            EstimatedDeliveryTime = new DateTime(2024, 2, 5, 19, 34, 17, 736, DateTimeKind.Local).AddTicks(680),
                            OrderID = 2,
                            StaffID = 1
                        });
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.OnlineConsultation", b =>
                {
                    b.Property<int>("OnlineConsultationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OnlineConsultationID"));

                    b.Property<DateTime?>("ConsultationDateEnd")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConsultationDateStart")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ConsultationDiagnosis")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("ConsultationPlatform")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<decimal?>("ConsultationPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ConsultationStatus")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ConsultationSymptom")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("ConsultationTimeEnd")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConsultationTimeStart")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("CustomerID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PharmacistID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("StaffID")
                        .HasColumnType("int");

                    b.HasKey("OnlineConsultationID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("OnlineConsultation");

                    b.HasData(
                        new
                        {
                            OnlineConsultationID = 1,
                            ConsultationDateEnd = new DateTime(2024, 2, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(906),
                            ConsultationDateStart = new DateTime(2024, 2, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(905),
                            ConsultationDiagnosis = "Common cold",
                            ConsultationPlatform = "Online Call",
                            ConsultationPrice = 40m,
                            ConsultationStatus = "Completed",
                            ConsultationSymptom = "Fever, Headache",
                            ConsultationTimeEnd = new DateTime(2024, 2, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(904),
                            ConsultationTimeStart = new DateTime(2024, 2, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(903),
                            CustomerID = 1,
                            PharmacistID = 1
                        },
                        new
                        {
                            OnlineConsultationID = 2,
                            ConsultationDateEnd = new DateTime(2024, 2, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(919),
                            ConsultationDateStart = new DateTime(2024, 2, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(918),
                            ConsultationDiagnosis = "Common cold",
                            ConsultationPlatform = "Online Call",
                            ConsultationPrice = 45.75m,
                            ConsultationStatus = "Completed",
                            ConsultationSymptom = "Headache",
                            ConsultationTimeEnd = new DateTime(2024, 2, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(917),
                            ConsultationTimeStart = new DateTime(2024, 2, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(916),
                            CustomerID = 2,
                            PharmacistID = 1
                        });
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int?>("CustomerID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OrderTime")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("StaffID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal?>("TotalCost")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("StaffID");

                    b.ToTable("Order");

                    b.HasData(
                        new
                        {
                            OrderID = 1,
                            CustomerID = 1,
                            OrderDate = new DateTime(2024, 2, 5, 13, 34, 17, 736, DateTimeKind.Local).AddTicks(1630),
                            OrderTime = new DateTime(2024, 2, 5, 13, 34, 17, 736, DateTimeKind.Local).AddTicks(1631),
                            PaymentType = "Credit Card",
                            StaffID = 2,
                            TotalCost = 15m
                        },
                        new
                        {
                            OrderID = 2,
                            CustomerID = 2,
                            OrderDate = new DateTime(2024, 2, 5, 13, 34, 17, 736, DateTimeKind.Local).AddTicks(1638),
                            OrderTime = new DateTime(2024, 2, 5, 13, 34, 17, 736, DateTimeKind.Local).AddTicks(1639),
                            PaymentType = "Credit Card",
                            StaffID = 2,
                            TotalCost = 25m
                        });
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("OrderItemQty")
                        .HasColumnType("int");

                    b.Property<decimal?>("OrderItemSubTotal")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("OrderItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItem");

                    b.HasData(
                        new
                        {
                            OrderItemID = 1,
                            OrderID = 1,
                            OrderItemQty = 2,
                            OrderItemSubTotal = 20m,
                            ProductID = 1
                        },
                        new
                        {
                            OrderItemID = 2,
                            OrderID = 2,
                            OrderItemQty = 3,
                            OrderItemSubTotal = 20m,
                            ProductID = 2
                        });
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Prescription", b =>
                {
                    b.Property<int>("PrescriptionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionID"));

                    b.Property<DateTime?>("ExpiryDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("IssueDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<int?>("OnlineConsultationID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("PrescriptionID");

                    b.HasIndex("OnlineConsultationID");

                    b.ToTable("Prescription");

                    b.HasData(
                        new
                        {
                            PrescriptionID = 1,
                            ExpiryDate = new DateTime(2024, 7, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            IssueDate = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            OnlineConsultationID = 1
                        },
                        new
                        {
                            PrescriptionID = 2,
                            ExpiryDate = new DateTime(2024, 8, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            IssueDate = new DateTime(2024, 2, 5, 0, 0, 0, 0, DateTimeKind.Local),
                            OnlineConsultationID = 2
                        });
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.PrescriptionItem", b =>
                {
                    b.Property<int>("PrescriptionItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionItemID"));

                    b.Property<int?>("PrescriptionID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("PrescriptionItemQuantity")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<decimal?>("PrescriptionItemSubTotal")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionItemID");

                    b.HasIndex("PrescriptionID");

                    b.HasIndex("ProductID");

                    b.ToTable("PrescriptionItem");

                    b.HasData(
                        new
                        {
                            PrescriptionItemID = 1,
                            PrescriptionID = 1,
                            PrescriptionItemQuantity = 1,
                            PrescriptionItemSubTotal = 10m,
                            ProductID = 3
                        },
                        new
                        {
                            PrescriptionItemID = 2,
                            PrescriptionID = 2,
                            PrescriptionItemQuantity = 2,
                            PrescriptionItemSubTotal = 20m,
                            ProductID = 4
                        });
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<bool>("PrescriptionStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ProductBrand")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductCategoryID")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<string>("ProductDosage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<DateTime?>("ProductExpiryDate")
                        .IsRequired()
                        .HasColumnType("datetime2");

                    b.Property<string>("ProductImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProductIngredients")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<int?>("ProductMaximumAge")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("ProductMinimumAge")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ProductPrice")
                        .IsRequired()
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProductUsage")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<bool?>("StockAvailable")
                        .IsRequired()
                        .HasColumnType("bit");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductID = 1,
                            PrescriptionStatus = false,
                            ProductBrand = "SCOTT'S",
                            ProductCategoryID = 2,
                            ProductDescription = "Scott's is the Number 1 Kids' Multivitamin Brand in Singapore*. Worry about your little ones being picky with food and not getting the necessary nutrients for proper growth/development? Do not worry, Scott’s Multivitamin Gummies is coming to your rescue! Available in three delicious fruity flavors Apple, Tropical Fruits, and the NEWEST addition - Mango; it contains Zinc and five essential vitamins - A, B6, C, D, E - to support your kid immunity, bone growth and healthy vision every day. Moreover, Scott's micro encapsulation technology locks in the goodness of Zinc and 5 Vitamins (Vitamin A, B6, C, D & E) whilst giving kids the taste they love.",
                            ProductDosage = "3x/Day",
                            ProductExpiryDate = new DateTime(2024, 7, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(2604),
                            ProductImage = "https://m.media-amazon.com/images/I/51Wylj9xQJL._AC_UF1000,1000_QL80_.jpg",
                            ProductIngredients = "Glucose, Syrup, Sugar, Gelatin, Acidity Regulator (Citric Acid, Sodium Citrate), Humectant (Sorbitol), Flavouring substance, Vitamins and Mineral (Vitamin C, Zinc, Vitamin E, Vitamin B6, Vitamin A and Vitamin D) and Colouring substance (Tartrazine)\r\n",
                            ProductMaximumAge = 12,
                            ProductMinimumAge = 2,
                            ProductName = "SCOTT'S Multivitamins Gummies Mango",
                            ProductPrice = 22m,
                            ProductUsage = "Strong bones and teeth, improve the immune system, growth and development",
                            StockAvailable = true
                        },
                        new
                        {
                            ProductID = 2,
                            PrescriptionStatus = false,
                            ProductBrand = "Panadol",
                            ProductCategoryID = 3,
                            ProductDescription = "Panadol Children’s Suspension 1-6 Years (120mg/5ml) provides relief from fever and pain in children aged 1 to 6 years. Like all Children’s Panadol products, Panadol Children’s Suspension 1-6 Years is gentle on little stomachs. A strawberry-flavoured suspension, Panadol Children’s Suspension 1-6 Years contains no alcohol and is aspirin-free.",
                            ProductDosage = "5-10ml (based on child's weight 9.5-19.5kg)\nDo not take more frequently than once every 4 Hours and do not exceed more than four doses in 24 hours. Do not take for more than 3 days without asking your doctor.",
                            ProductExpiryDate = new DateTime(2024, 7, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(2612),
                            ProductImage = "https://alcare.sg/wp-content/uploads/2019/08/PAN1-S.jpg",
                            ProductIngredients = "Active ingredient: 120 mg/5 ml Paracetamol\r\nExcipients: No Alcohol, no Aspirin.",
                            ProductMaximumAge = 6,
                            ProductMinimumAge = 1,
                            ProductName = "Panadol Children's Suspension",
                            ProductPrice = 9m,
                            ProductUsage = "Fever, Headaches, Symptoms of colds and flu, Teething pain, Toothaches, Earache, Pain associated with immunisation",
                            StockAvailable = true
                        },
                        new
                        {
                            ProductID = 3,
                            PrescriptionStatus = true,
                            ProductBrand = "Amoxil",
                            ProductCategoryID = 1,
                            ProductDescription = "Amoxicillin is a penicillin antibiotic. It is used to treat bacterial infections, such as chest infections (including pneumonia) and dental abscesses. It can also be used together with other antibiotics and medicines to treat stomach ulcers.",
                            ProductDosage = "1.25-12.5ml (based on child's weight 3.6-36kg)\nGive this dose three (3) times a day—once in the morning, once at mid-day, and once in the evening—for as long as directed.",
                            ProductExpiryDate = new DateTime(2024, 7, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(2617),
                            ProductImage = "https://d3pq5rjvq8yvv1.cloudfront.net/catalog/product/cache/1/image/9df78eab33525d08d6e5fb8d27136e95/a/m/amox500tab.jpg",
                            ProductIngredients = "Croscarmellose sodium, gelatin, magnesium stearate, titanium dioxide, and yellow iron oxide.",
                            ProductMaximumAge = 12,
                            ProductMinimumAge = 5,
                            ProductName = "Amoxicillin",
                            ProductPrice = 10m,
                            ProductUsage = "Bacterial infections, such as chest infections (including pneumonia) and dental abscesses. Can also be used together with other antibiotics and medicines to treat stomach ulcers.",
                            StockAvailable = true
                        },
                        new
                        {
                            ProductID = 4,
                            PrescriptionStatus = true,
                            ProductBrand = "Ibuprofen",
                            ProductCategoryID = 1,
                            ProductDescription = "Ibuprofen is a nonsteroidal anti-inflammatory drug.",
                            ProductDosage = "Ibuprofen dose is 400mg(two tablets) to be taken initially. 200mg(one tablet) to 400mg(two tablets) may be taken every 4 hours when required.",
                            ProductExpiryDate = new DateTime(2024, 7, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(2621),
                            ProductImage = "https://www.biovea.com/sg/images/products/xlrg/7188_z.jpg",
                            ProductIngredients = "Lactose, Maize Starch, Hypromellose, Sodium Starch Glycollate, Colloidal Anhydrous Silica, Magnesium Stearate, Sucrose, Talc, Titanium Dioxide (E171) and Carnauba Wax",
                            ProductMaximumAge = 12,
                            ProductMinimumAge = 5,
                            ProductName = "Ibuprofen",
                            ProductPrice = 10m,
                            ProductUsage = "Treat fever, pain, and inflammation in children",
                            StockAvailable = true
                        },
                        new
                        {
                            ProductID = 5,
                            PrescriptionStatus = false,
                            ProductBrand = "Zyrtec",
                            ProductCategoryID = 3,
                            ProductDescription = "Zyrtec pcs 10's is now Zyrtec-R pcs 10's.\r\nNew Name, New Pack, Same Formula.\r\nZyrtec-R is an antihistamine.",
                            ProductDosage = "Children aged from 2 to 12 years: 2.5 mL of oral solution (half of a spoon) twice daily. Children aged from 6 to 12 years: 5 mg [10 drops, or 5 ml oral solution (1 full spoon) or half of the tablet] twice daily.",
                            ProductExpiryDate = new DateTime(2024, 7, 5, 5, 34, 17, 736, DateTimeKind.Utc).AddTicks(2625),
                            ProductImage = "https://m.media-amazon.com/images/I/717EcbxEZ2L._AC_UF1000,1000_QL80_.jpg",
                            ProductIngredients = "",
                            ProductMaximumAge = 12,
                            ProductMinimumAge = 2,
                            ProductName = "Zyrtec 24 Allergic Syrup",
                            ProductPrice = 12m,
                            ProductUsage = "Treats allergy symptoms like itchy eyes, sneezing, a stuffy nose or hives",
                            StockAvailable = true
                        });
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Staff", b =>
                {
                    b.Property<int>("StaffID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("StaffID"));

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffFname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffGender")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("StaffImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StaffLname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Staff_email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Staff_pass")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StaffID");

                    b.ToTable("Staff");

                    b.HasData(
                        new
                        {
                            StaffID = 1,
                            Position = "Pharmacist",
                            StaffFname = "Tom",
                            StaffGender = "Male",
                            StaffImage = "https://www.shutterstock.com/image-photo/indian-young-doctor-cardiologist-man-260nw-2370864331.jpg",
                            StaffLname = "Lim",
                            Staff_email = "tomlim@blazor.com",
                            Staff_pass = "P@ssword2"
                        },
                        new
                        {
                            StaffID = 2,
                            Position = "Order Clerk",
                            StaffFname = "Mary",
                            StaffGender = "Female",
                            StaffImage = "https://images.pond5.com/pharmacist-icon-profession-and-job-illustration-137441229_iconl_nowm.jpeg",
                            StaffLname = "Ong",
                            Staff_email = "maryong@blazor.com",
                            Staff_pass = "P@ssword3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("OnlinePharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("OnlinePharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlinePharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("OnlinePharmacy.Server.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Delivery", b =>
                {
                    b.HasOne("OnlinePharmacy.Shared.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlinePharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.Navigation("Order");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.OnlineConsultation", b =>
                {
                    b.HasOne("OnlinePharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlinePharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID");

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Order", b =>
                {
                    b.HasOne("OnlinePharmacy.Shared.Domain.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlinePharmacy.Shared.Domain.Staff", "Staff")
                        .WithMany()
                        .HasForeignKey("StaffID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Staff");
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.OrderItem", b =>
                {
                    b.HasOne("OnlinePharmacy.Shared.Domain.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlinePharmacy.Shared.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Prescription", b =>
                {
                    b.HasOne("OnlinePharmacy.Shared.Domain.OnlineConsultation", "OnlineConsultation")
                        .WithMany()
                        .HasForeignKey("OnlineConsultationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("OnlineConsultation");
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.PrescriptionItem", b =>
                {
                    b.HasOne("OnlinePharmacy.Shared.Domain.Prescription", "Prescription")
                        .WithMany()
                        .HasForeignKey("PrescriptionID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("OnlinePharmacy.Shared.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Prescription");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("OnlinePharmacy.Shared.Domain.Product", b =>
                {
                    b.HasOne("OnlinePharmacy.Shared.Domain.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryID");

                    b.Navigation("Category");
                });
#pragma warning restore 612, 618
        }
    }
}
